{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,SAmCpC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBL,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,IAKzBL,EAAKY,iBAAiB,UA7CtB,SAAoBC,GAClBA,EAAMC,iBAEN,IAAMC,EAAO,CACXV,MAAOW,OAAOC,SAASjB,EAAKK,MAAMa,OAClCC,KAAMH,OAAOC,SAASjB,EAAKmB,KAAKD,OAChCE,OAAQJ,OAAOC,SAASjB,EAAKoB,OAAOF,QAGtC,GAAIH,EAAKV,MAAQ,GAAKU,EAAKI,KAAO,GAAKJ,EAAKK,OAAS,EACnDtB,EAAAuB,OAAOC,QAAQ,0CAIjB,IACE,IAAIC,EAAI,EAAKC,EAAwBT,EAAxBV,MAAOc,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAC1BG,GAAKH,EACLG,IAAKC,GAASL,EAEdhB,EAAcoB,EAAGC,GACdC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,YAAW,WACT7B,EAAAuB,OAAOO,QAAQ,qBAAoCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,GACxDA,E,IAEJyB,OAAM,SAAAJ,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,YAAW,WACT7B,EAAAuB,OAAOC,QAAQ,oBAAmCO,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,GACvDA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst form = document.querySelector('.form');\n\nfunction runCreator(event) {\n  event.preventDefault();\n\n  const data = {\n    delay: Number.parseInt(form.delay.value),\n    step: Number.parseInt(form.step.value),\n    amount: Number.parseInt(form.amount.value),\n  };\n\n  if (data.delay < 0 || data.step < 0 || data.amount < 0) {\n    Notify.failure('Please enter non-negative numbers');\n    return;\n  }\n\n  for (\n    let i = 1, { delay, step, amount } = data;\n    i <= amount;\n    i++, delay += step\n  ) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n\nform.addEventListener('submit', runCreator);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","addEventListener","event","preventDefault","data","Number","parseInt","value","step","amount","Notify","failure","i","delay1","then","param","setTimeout","success","concat","catch"],"version":3,"file":"03-promises.041cdb97.js.map"}